import{_ as t,o as e,c as l,R as a,av as i,aw as r,ax as s,ay as o,az as d}from"./chunks/framework.QnHPwK53.js";const m=JSON.parse('{"title":"网络基础知识","description":"","frontmatter":{},"headers":[],"relativePath":"necessary/network.md","filePath":"necessary/network.md","lastUpdated":1712717073000}'),n={name:"necessary/network.md"},c=a('<h1 id="网络基础知识" tabindex="-1">网络基础知识 <a class="header-anchor" href="#网络基础知识" aria-label="Permalink to &quot;网络基础知识&quot;">​</a></h1><h2 id="http-https" tabindex="-1">HTTP 与 HTTPS 的基本概念 <a class="header-anchor" href="#http-https" aria-label="Permalink to &quot;HTTP 与 HTTPS 的基本概念 {#http-https}&quot;">​</a></h2><h3 id="http" tabindex="-1">HTTP <a class="header-anchor" href="#http" aria-label="Permalink to &quot;HTTP&quot;">​</a></h3><ul><li><strong>HTTP</strong>（HyperText Transfer Protocol：超文本传输协议）是一种用于分布式、协作式和超媒体信息系统的应用层协议。 简单来说就是一种发布和接收 HTML 页面的方法，被用于在 Web 浏览器和网站服务器之间传递信息。</li><li><strong>HTTP</strong> 默认工作在 TCP 协议 80 端口，用户访问网站 http:// 打头的都是标准 <strong>HTTP</strong> 服务。</li><li><strong>HTTP</strong> 协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了 Web 浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，<strong>HTTP</strong>协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。</li></ul><div class="info custom-block"><p class="custom-block-title">HTTP 的特点</p><ul><li>无状态：协议对客户端没有状态存储，对事物处理没有“记忆”能力，比如访问一个网站需要反复进行登录操作。</li><li>无连接：HTTP/1.1 之前，由于无状态特点，每次请求需要通过 TCP 三次握手四次挥手，和服务器重新建立连接。比如某个客户机在短时间多次请求同一个资源，服务器并不能区别是否已经响应过用户的请求，所以每次需要重新响应请求，需要耗费不必要的时间和流量。</li><li>基于请求和响应：基本的特性，由客户端发起请求，服务端响应。</li><li>简单快速、灵活。</li><li>通信使用明文、请求和响应不会对通信方进行确认、无法保护数据的完整性。</li></ul></div><h3 id="https" tabindex="-1">HTTPS <a class="header-anchor" href="#https" aria-label="Permalink to &quot;HTTPS&quot;">​</a></h3><ul><li><p><strong>HTTPS</strong>（Hypertext Transfer Protocol Secure：超文本传输安全协议）是一种透过计算机网络进行安全通信的传输协议。<strong>HTTPS</strong> 经由 <strong>HTTP</strong> 进行通信，但利用 SSL/TLS 来加密数据包。<strong>HTTPS</strong> 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p></li><li><p><strong>HTTPS</strong> 默认工作在 TCP 协议 443 端口，它的工作流程一般如以下方式：</p></li></ul><blockquote><p>1、TCP 三次同步握手</p><p>2、客户端验证服务器数字证书</p><p>3、DH 算法协商对称加密算法的密钥、hash 算法的密钥</p><p>4、SSL 安全加密隧道协商完成</p><p>5、网页以加密的方式传输，用协商的对称加密算法和密钥加密，保证数据机密性；用协商的 hash 算法进行数据完整性保护，保证数据不被篡改。</p></blockquote><h2 id="http-and-https-diff" tabindex="-1">HTTP 和 HTTPS 的区别 <a class="header-anchor" href="#http-and-https-diff" aria-label="Permalink to &quot;HTTP 和 HTTPS 的区别 {#http-and-https-diff}&quot;">​</a></h2><ul><li><strong>HTTP</strong> 明文传输，数据都是未加密的，安全性较差，<strong>HTTPS</strong>（HTTP + SSL） 数据传输过程是加密的，安全性较好。</li><li>使用 <strong>HTTPS</strong> 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。证书颁发机构如：Symantec、Comodo、GoDaddy 和 GlobalSign 等。</li><li><strong>HTTP</strong> 页面响应速度比 <strong>HTTPS</strong> 快，主要是因为 <strong>HTTP</strong> 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 <strong>HTTPS</strong> 除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。</li><li><strong>HTTP</strong> 和 <strong>HTTPS</strong> 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。</li><li><strong>HTTPS</strong> 其实就是建构在 SSL/TLS 之上的 <strong>HTTP</strong> 协议，所以，要比较 HTTPS 比 <strong>HTTP</strong> 要更耗费服务器资源。</li></ul><h2 id="http-status-code" tabindex="-1">HTTP 状态码 (<strong>HTTP Status Code</strong>) <a class="header-anchor" href="#http-status-code" aria-label="Permalink to &quot;HTTP 状态码 (**HTTP Status Code**) {#http-status-code}&quot;">​</a></h2><p>HTTP 状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型。响应分为五类：信息响应(100–199)，成功响应(200–299)，重定向(300–399)，客户端错误(400–499)和服务器错误 (500–599)：</p><table><thead><tr><th style="text-align:center;">分类</th><th style="text-align:left;">分类描述</th></tr></thead><tbody><tr><td style="text-align:center;">1**</td><td style="text-align:left;">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td style="text-align:center;">2**</td><td style="text-align:left;">成功，操作被成功接收并处理</td></tr><tr><td style="text-align:center;">3**</td><td style="text-align:left;">重定向，需要进一步的操作以完成请求</td></tr><tr><td style="text-align:center;">4**</td><td style="text-align:left;">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td style="text-align:center;">5**</td><td style="text-align:left;">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><h3 id="http-状态码列表" tabindex="-1">HTTP 状态码列表 <a class="header-anchor" href="#http-状态码列表" aria-label="Permalink to &quot;HTTP 状态码列表&quot;">​</a></h3><table><thead><tr><th style="text-align:center;">状态码</th><th style="text-align:left;">状态码描述</th></tr></thead><tbody><tr><td style="text-align:center;">100</td><td style="text-align:left;">继续。客户端继续响应其请求</td></tr><tr><td style="text-align:center;">101</td><td style="text-align:left;">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到 HTTP 的新版本协议</td></tr><tr><td style="text-align:center;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">200</td><td style="text-align:left;">请求成功。一般用于 GET 与 POST 请求</td></tr><tr><td style="text-align:center;">201</td><td style="text-align:left;">已创建。成功请求并创建了新的资源</td></tr><tr><td style="text-align:center;">202</td><td style="text-align:left;">已接受。已经接受请求，但未处理完成</td></tr><tr><td style="text-align:center;">203</td><td style="text-align:left;">非授权信息。请求成功。但返回的 meta 信息不在原始的服务器，而是一个副本</td></tr><tr><td style="text-align:center;">204</td><td style="text-align:left;">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td style="text-align:center;">205</td><td style="text-align:left;">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td style="text-align:center;">206</td><td style="text-align:left;">部分内容。服务器成功处理了部分 GET 请求</td></tr><tr><td style="text-align:center;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">300</td><td style="text-align:left;">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td style="text-align:center;">301</td><td style="text-align:left;">永久移动。请求的资源已被永久的移动到新 URI，返回信息会包括新的 URI，浏览器会自动定向到新 URI。今后任何新的请求都应使用新的 URI 代替</td></tr><tr><td style="text-align:center;">302</td><td style="text-align:left;">临时移动。与 301 类似。但资源只是临时被移动。客户端应继续使用原有 URI</td></tr><tr><td style="text-align:center;">303</td><td style="text-align:left;">查看其它地址。与 301 类似。使用 GET 和 POST 请求查看</td></tr><tr><td style="text-align:center;">304</td><td style="text-align:left;">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td style="text-align:center;">305</td><td style="text-align:left;">使用代理。所请求的资源必须通过代理访问</td></tr><tr><td style="text-align:center;">306</td><td style="text-align:left;">已经被废弃的 HTTP 状态码</td></tr><tr><td style="text-align:center;">307</td><td style="text-align:left;">临时重定向。与 302 类似。使用 GET 请求重定向</td></tr><tr><td style="text-align:center;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">400</td><td style="text-align:left;">客户端请求的语法错误，服务器无法理解</td></tr><tr><td style="text-align:center;">401</td><td style="text-align:left;">Unauthorized 请求要求用户的身份认证</td></tr><tr><td style="text-align:center;">402</td><td style="text-align:left;">保留，将来使用</td></tr><tr><td style="text-align:center;">403</td><td style="text-align:left;">服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td style="text-align:center;">404</td><td style="text-align:left;">服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置&quot;您所请求的资源无法找到&quot;的个性页面</td></tr><tr><td style="text-align:center;">405</td><td style="text-align:left;">客户端请求中的方法被禁止</td></tr><tr><td style="text-align:center;">406</td><td style="text-align:left;">服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td style="text-align:center;">407</td><td style="text-align:left;">请求要求代理的身份认证，与 401 类似，但请求者应当使用代理进行授权</td></tr><tr><td style="text-align:center;">408</td><td style="text-align:left;">服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td style="text-align:center;">409</td><td style="text-align:left;">服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td style="text-align:center;">410</td><td style="text-align:left;">客户端请求的资源已经不存在。410 不同于 404，如果资源以前有现在被永久删除了可使用 410 代码，网站设计人员可通过 301 代码指定资源的新位置</td></tr><tr><td style="text-align:center;">411</td><td style="text-align:left;">服务器无法处理客户端发送的不带 Content-Length 的请求信息</td></tr><tr><td style="text-align:center;">412</td><td style="text-align:left;">客户端请求信息的先决条件错误</td></tr><tr><td style="text-align:center;">413</td><td style="text-align:left;">由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个 Retry-After 的响应信息</td></tr><tr><td style="text-align:center;">414</td><td style="text-align:left;">请求的 URI 过长（URI 通常为网址），服务器无法处理</td></tr><tr><td style="text-align:center;">415</td><td style="text-align:left;">服务器无法处理请求附带的媒体格式</td></tr><tr><td style="text-align:center;">416</td><td style="text-align:left;">客户端请求的范围无效</td></tr><tr><td style="text-align:center;">417</td><td style="text-align:left;">服务器无法满足 Expect 的请求头信息</td></tr><tr><td style="text-align:center;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">500</td><td style="text-align:left;">服务器内部错误，无法完成请求</td></tr><tr><td style="text-align:center;">501</td><td style="text-align:left;">服务器不支持请求的功能，无法完成请求</td></tr><tr><td style="text-align:center;">502</td><td style="text-align:left;">作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td style="text-align:center;">503</td><td style="text-align:left;">由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的 Retry-After 头信息中</td></tr><tr><td style="text-align:center;">504</td><td style="text-align:left;">充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td style="text-align:center;">505</td><td style="text-align:left;">服务器不支持请求的 HTTP 协议的版本，无法完成处理</td></tr></tbody></table><h2 id="browser-page-process" tabindex="-1">浏览器从 URL 输入到页面显示过程发生了什么？ <a class="header-anchor" href="#browser-page-process" aria-label="Permalink to &quot;浏览器从 URL 输入到页面显示过程发生了什么？{#browser-page-process}&quot;">​</a></h2><ol><li>解析 URL：首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。</li><li>缓存判断：浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。</li><li><a href="#dns">DNS 解析</a>: 下一步首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求。</li><li>获取 MAC 地址： 当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理。通过将 IP 地址与本机的子网掩码相与，可以判断是否与请求主机在同一个子网里，如果在同一个子网里，可以使用 APR 协议获取到目的主机的 MAC 地址，如果不在一个子网里，那么请求应该转发给网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。</li><li>TCP 三次握手： 下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向客户端发送一个 SYN ACK 报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个 ACK 确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。</li><li>HTTPS 握手： 如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。</li><li>返回数据： 当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。</li><li>页面渲染： 浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。</li><li>TCP 四次挥手： 最后一步是 TCP 断开连接的四次挥手过程。若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。</li></ol><h2 id="dns" tabindex="-1">什么是 DNS？ <a class="header-anchor" href="#dns" aria-label="Permalink to &quot;什么是 DNS？{#dns}&quot;">​</a></h2><p><strong>域名系统</strong>（英文：Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS 使用 UDP 端口 53。当前，对于每一级域名长度的限制是 63 个字符，域名总长度则不能超过 253 个字符。</p><h2 id="tcp" tabindex="-1">什么是 TCP 协议？ <a class="header-anchor" href="#tcp" aria-label="Permalink to &quot;什么是 TCP 协议？{#tcp}&quot;">​</a></h2><p><strong>传输控制协议</strong>（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的 RFC 793 定义。</p><h3 id="tcp-的特性" tabindex="-1">TCP 的特性 <a class="header-anchor" href="#tcp-的特性" aria-label="Permalink to &quot;TCP 的特性&quot;">​</a></h3><ul><li>TCP 提供一种面向连接的、可靠的字节流服务</li><li>在一个 TCP 连接中，仅有两方进行彼此通信。</li><li>TCP 使用校验和，确认和重传机制来保证可靠传输</li><li>TCP 给数据分节进行排序，并使用累积确认保证数据的顺序不变和非重复</li><li>TCP 使用滑动窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制</li></ul><div class="tip custom-block"><p class="custom-block-title">注意</p><p>TCP 并不能保证数据一定会被对方接收到，因为这是不可能的。TCP 能够做到的是，如果有可能，就把数据递送到接收方，否则就（通过放弃重传并且中断连接这一手段）通知用户。因此准确说 TCP 也不是 100% 可靠的协议，它所能提供的是数据的可靠递送或故障的可靠通知。</p></div><h2 id="http-and-tcp-diff" tabindex="-1">HTTP 与 TCP 区别 <a class="header-anchor" href="#http-and-tcp-diff" aria-label="Permalink to &quot;HTTP 与 TCP 区别 {#http-and-tcp-diff}&quot;">​</a></h2><p>TCP 协议对应于传输层，而 HTTP 协议对应于应用层，从本质上来说，二者没有可比性：</p><ul><li>HTTP 对应于应用层，TCP 协议对应于传输层</li><li>HTTP 协议是在 TCP 协议之上建立的，HTTP 在发起请求时通过 TCP 协议建立起连接服务器的通道，请求结束后，立即断开 TCP 连接</li><li>HTTP 是无状态的短连接，而 TCP 是有状态的长连接</li><li>TCP 是传输层协议，定义的是数据传输和连接方式的规范，HTTP 是应用层协议，定义的是传输数据的内容的规范<div class="info custom-block"><p class="custom-block-title">说明</p><p>从 HTTP/1.1 起，默认都开启了 Keep-Alive，保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接 Keep-Alive 不会永久保持连接，它有一个保持时间，可以在不同的服务器软件(如 Apache)中设定这个时间。</p></div></li></ul><h2 id="three-and-four-handshakes" tabindex="-1">三次握手和四次挥手 <a class="header-anchor" href="#three-and-four-handshakes" aria-label="Permalink to &quot;三次握手和四次挥手 {#three-and-four-handshakes}&quot;">​</a></h2><p><img src="'+i+'" alt="图示"></p><h3 id="三次握手" tabindex="-1">三次握手 <a class="header-anchor" href="#三次握手" aria-label="Permalink to &quot;三次握手&quot;">​</a></h3><ol><li><p>第一次：客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 <code>SYN-SENT 状态</code>(表示请求连接)。</p></li><li><p>第二次：服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 <code>SYN-RECEIVED 状态</code>（收到来自对端的 SYN 请求，并回复 SYN 请求后，等待对端响应 SYN 请求的 ACK 消息）。</p></li><li><p>第三次：当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 <code>ESTABLISHED 状态</code>(代表连接建立，双方在这个状态下进行 TCP 数据交互)，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。</p></li></ol><h3 id="四次挥手" tabindex="-1">四次挥手 <a class="header-anchor" href="#四次挥手" aria-label="Permalink to &quot;四次挥手&quot;">​</a></h3><ol><li><p>第一次：若客户端 A 认为数据发送完成，则它需要向服务端 B 发送连接释放请求。</p></li><li><p>第二次：B 收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明 A 到 B 的连接已经释放，不再接收 A 发的数据了。但是因为 TCP 连接是双向的，所以 B 仍旧可以发送数据给 A。</p></li><li><p>第三次：B 如果此时还有没发完的数据会继续发送，完毕后会向 A 发送连接释放请求，然后 B 便进入 LAST-ACK 状态。</p></li></ol><div class="info custom-block"><p class="custom-block-title">提示</p><p>通过延迟确认的技术(通常有时间限制，否则对方会误认为需要重传)，可以将第二次和第三次握手合并，延迟 ACK 包的发送。</p></div><ol start="4"><li>第四次：A 收到释放请求后，向 B 发送确认应答，此时 A 进入 TIME-WAIT 状态。该状态会持续 2MSL(最长报文段寿命，指报文段在网络中生存的时间，超时会被抛弃) 时间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 B 收到确认应答后，也便进入 CLOSED 状态。</li></ol><h2 id="same-origin-policy" tabindex="-1">什么是同源策略？ <a class="header-anchor" href="#same-origin-policy" aria-label="Permalink to &quot;什么是同源策略？{#same-origin-policy}&quot;">​</a></h2><p><code>同源策略</code>是一个重要的安全策略，它用于限制一个 origin 的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。 它是浏览器核心也最基本的安全功能，它会阻止一个域的 js 脚本和另外一个域的内容进行交互，如果缺少了同源策略，浏览器很容易受到 XSS、CSFR 等攻击。 所谓同源（即在同一个域）就是两个页面具有相同的协议（protocol）、主机（host）和端口号（port）。</p><h2 id="browser-caching" tabindex="-1">浏览器缓存机制：强缓存和协商缓存 <a class="header-anchor" href="#browser-caching" aria-label="Permalink to &quot;浏览器缓存机制：强缓存和协商缓存 {#browser-caching}&quot;">​</a></h2><p><strong>缓存</strong>是一种数据存储技术，是指浏览器（客户端）在本地磁盘中对访问过的资源保存的副本文件。</p><p>浏览器缓存（Browser Caching）有以下几个特点：</p><p>✅ 减少重复数据请求，避免通过网络再次加载资源，节省流量。</p><p>✅ 降低服务器的压力，提升网站性能。</p><p>✅ 加快客户端加载网页的速度， 提升用户体验。</p><p>❌ 资源如果有更改但是客户端不及时更新会造成用户获取信息滞后。</p><p>浏览器缓存分为强缓存和协商缓存，两者有两个比较明显的区别：</p><ul><li>如果浏览器命中强缓存，则不需要给服务器发请求；而协商缓存最终由服务器来决定是否使用缓存，即客户端与服务器之间存在一次通信，与服务器进行对比。</li><li>在 chrome 命中强缓存（虽然没有发出真实的 http 请求）的请求状态码返回是 200 (from cache)；而协商缓存如果命中走缓存的话，请求的状态码是 304 (not modified)。</li></ul><h3 id="请求流程" tabindex="-1">请求流程 <a class="header-anchor" href="#请求流程" aria-label="Permalink to &quot;请求流程&quot;">​</a></h3><p>浏览器在第一次请求后缓存资源，再次请求时，会进行下面两个步骤：</p><ul><li>浏览器会获取该缓存资源的 header 中的信息，根据 response header 中的 expires 和 cache-control 来判断是否命中强缓存，如果命中则直接从缓存中获取资源。</li><li>如果没有命中强缓存，浏览器就会发送请求到服务器，这次请求会带上 IF-Modified-Since 或者 IF-None-Match, 它们的值分别是第一次请求返回 Last-Modified 或者 Etag，由服务器来对比这一对字段来判断是否命中。如果命中，则服务器返回 304 状态码，并且不会返回资源内容，浏览器会直接从缓存获取；否则服务器最终会返回资源的实际内容，并更新 header 中的相关缓存字段</li></ul><p><img src="'+r+'" alt="web-cache"></p><h3 id="强缓存" tabindex="-1">强缓存 <a class="header-anchor" href="#强缓存" aria-label="Permalink to &quot;强缓存&quot;">​</a></h3><p>强缓存是根据返回头中的 Expires 或者 Cache-Control 两个字段来控制的，都是表示资源的缓存有效时间。</p><ol><li>expires</li></ol><p>Expires 是 http 1.0 的规范，值是一个 GMT 格式的时间点字符串，比如 Expires:Mon,18 Oct 2066 23:59:59 GMT 。这个时间点代表资源失效的时间，如果当前的时间戳在这个时间之前，则判定命中缓存。有一个缺点是，失效时间是一个绝对时间，如果服务器时间与客户端时间偏差较大时，就会导致缓存混乱。而服务器的时间跟用户的实际时间是不一样是很正常的，所以 Expires 在实际使用中会带来一些麻烦。</p><ol start="2"><li>Cache-Control</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Control</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: public,max</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">maxage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3600</span></span></code></pre></div><p>Cache-Control 这个字段是 http 1.1 的规范，如果 Cache-Control 与 Expires 同时存在的话， Cache-Control 的优先级高于 Expires。</p><p>一般常用该字段的 max-age 值来进行判断，它是一个相对时间，比如 Cache-Control:max-age=3600 代表资源的有效期是 3600 秒。并且返回头中的 Date 表示消息发送的时间，表示当前资源在 Date ~ Date +3600s 这段时间里都是有效的。不过我在实际使用中常常遇到设置了 max-age 之后，在 max-age 时间内重新访问资源却会返回 304 not modified ，这是由于服务器的时间与本地的时间不同造成的。</p><ul><li>max-age 和 s-maxage，是一个数字, 表示资源过了多少秒后变为无效。在浏览器中，max-age 和 s-maxage 都起作用，且 s-maxage 的优先级高于 max-age。在代理服务器中，只有 s-maxage 起作用。可以通过设置 max-age 为 0 表示立即过期来向服务器请求资源。</li><li>no-cache 不使用本地缓存。需要使用协商缓存。</li><li>no-store 直接禁止浏览器缓存数据，每次请求资源都会向服务器要完整的资源， 类似于 network 中的 disabled cache。</li><li>public 可以被所有用户缓存，包括终端用户和 cdn 等中间件代理服务器。</li><li>private 只能被终端用户的浏览器缓存。</li><li>pragma 它的值有 ​​no-cache​​​ 和 ​​no-store​​​, 表示意思同 ​​cache-control​​​, 优先级高于 ​​cache-control​​​ 和 ​​expires​​​, 即三者同时出现时, ​pragma​​ ​-&gt; ​​cache-control​ ​​-&gt; ​​expires​​。</li></ul><h3 id="缓存位置" tabindex="-1">缓存位置 <a class="header-anchor" href="#缓存位置" aria-label="Permalink to &quot;缓存位置&quot;">​</a></h3><p><img src="'+s+'" alt="cache-location"></p><p>由上图可以看到，在<strong>大小</strong>那一栏有 <code>内存缓存（memory cache）</code> 和 <code>硬盘缓存（disk cache）</code>两种情况，代表缓存的位置。</p><p><strong>浏览器读取缓存的顺序为 memory –&gt; disk –&gt; 服务器请求</strong></p><ul><li>内存缓存(from memory cache)：内存缓存具有两个特点，分别是速度快和时间限制。</li><li>硬盘缓存(from disk cache)：硬盘缓存则是直接将缓存写入硬盘文件中，读取缓存需要 对该缓存存放的硬盘文件进行 I/O 操作，然后重新解析该缓存内容，读取复杂，速度比 内存缓存慢。</li></ul><p>在浏览器中，浏览器会在 js 和图片等文件解析执行后直接存入内存缓存中，那么当刷新 页面时只需直接从内存缓存中读取(from memory cache)； 而 css 文件则会存入硬盘文件中，所以每次渲染页面都需要从硬盘读取缓存(from disk cache)。</p><p>因为 CSS 文件加载一次就可渲染出来,我们不会频繁读取它,所以它不适合缓存到内存中, 但是 js 之类的脚本却随时可能会执行,如果脚本在磁盘当中,我们在执行脚本的时候需要 从磁盘取到内存中来,这样 IO 开销就很大了,有可能导致浏览器失去响应。</p><div class="tip custom-block"><p class="custom-block-title"><strong>三级缓存原理</strong></p><ol><li>先去内存看，如果有，直接加载</li><li>如果内存没有，择取硬盘获取，如果有直接加载</li><li>如果硬盘也没有，那么就进行网络请求</li><li>加载到的资源缓存到硬盘和内存，下次请求可以快速从内存中获取到</li></ol></div><h3 id="协商缓存" tabindex="-1">协商缓存 <a class="header-anchor" href="#协商缓存" aria-label="Permalink to &quot;协商缓存&quot;">​</a></h3><p>协商缓存是由服务器来确定缓存资源是否可用。 主要涉及到两对属性字段，都是成对出现的，即第一次请求的响应头带上某个字, <code>Last-Modified</code> 或者 <code>Etag</code>，则后续请求则会带上对应的请求字段 <code>If-Modified-Since</code>或者 <code>If-None-Match</code>，若响应头没有 <code>Last-Modified</code> 或者 <code>Etag</code> 字段，则请求头也不会有对应的字段。</p><ul><li><p><code>Last-Modified</code>/<code>If-Modified-Since</code> 二者的值都是 GMT 格式的时间字符串， <code>Last-Modified</code> <strong>标记最后文件修改时间</strong>， 下一次请求时，请求头中会带上 <code>If-Modified-Since</code> 值就是 <code>Last-Modified</code> 告诉服务器我本地缓存的文件最后修改的时间，在服务器上根据文件的最后修改时间判断资源是否有变化， 如果文件没有变更则返回 304 Not Modified ，请求不会返回资源内容，浏览器直接使用本地缓存。当服务器返回 304 Not Modified 的响应时，response header 中不会再添加的 <code>Last-Modified</code> 去试图更新本地缓存的 <code>Last-Modified</code>， 因为既然资源没有变化，那么 <code>Last-Modified</code> 也就不会改变；如果资源有变化，就正常返回返回资源内容，新的 <code>Last-Modified</code> 会在 response header 返回，并在下次请求之前更新本地缓存的 <code>Last-Modified</code>，下次请求时，<code>If-Modified-Since</code>会启用更新后的 <code>Last-Modified</code>。</p></li><li><p><code>Etag</code>/<code>If-None-Match</code>， 值都是由服务器为每一个资源生成的唯一标识串，只要资源有变化就这个值就会改变。服务器根据文件本身算出一个哈希值并通过 <code>ETag</code>字段返回给浏览器，接收到 <code>If-None-Match</code> 字段以后，服务器通过比较两者是否一致来判定文件内容是否被改变。与 <code>Last-Modified</code> 不一样的是，当服务器返回 304 Not Modified 的响应时，由于在服务器上<code>ETag</code> 重新计算过，response header 中还会把这个 <code>ETag</code> 返回，即使这个 <code>ETag</code> 跟之前的没有变化。</p></li></ul><div class="info custom-block"><p class="custom-block-title">为什么要有 Etag</p><p>HTTP1.1 中 Etag 的出现主要是为了解决几个 Last-Modified 比较难解决的问题：</p><ul><li>一些文件也许会周期性的更改，但是内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新 GET；</li><li>某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说 1s 内修改了 N 次)，If-Modified-Since 能检查到的粒度是秒级的，使用 Etag 就能够保证这种需求下客户端在 1 秒内能刷新 N 次 cache。</li><li>某些服务器不能精确的得到文件的最后修改时间。</li></ul></div><div class="tip custom-block"><p class="custom-block-title">浏览器缓存总的优先级</p><p><strong>Cache-Control</strong> &gt; <strong>expires</strong> &gt; <strong>Etag</strong> &gt; <strong>Last-Modified</strong></p></div><h2 id="forward-and-reverse-proxy" tabindex="-1">正向代理？反向代理？它们有什么区别？ <a class="header-anchor" href="#forward-and-reverse-proxy" aria-label="Permalink to &quot;正向代理？反向代理？它们有什么区别？{#forward-and-reverse-proxy}&quot;">​</a></h2><h3 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h3><p>正向代理（forward proxy）：是一个位于客户端和目标服务器之间的服务器(代理服务器)，为了从目标服务器取得内容，客户端向代理服务器发送一个请求并指定目标，然后代理服务器向目标服务器转交请求并将获得的内容返回给客户端。</p><p>反向代理（reverse proxy）：是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><h3 id="正向代理" tabindex="-1">正向代理 <a class="header-anchor" href="#正向代理" aria-label="Permalink to &quot;正向代理&quot;">​</a></h3><p>正向代理是一个位于客户端和目标服务器之间的<strong>代理服务器(中间服务器)</strong>。</p><p>正向代理其实是比较常见的，比如访问外网的技术。</p><p><img src="'+o+'" alt="forward-proxy"></p><p><strong>正向代理的作用：</strong></p><ol><li><p>突破访问限制</p><p>通过代理服务器，可以突破自身 IP 访问限制，访问国外网站，教育网等。</p></li><li><p>提高访问速度</p><p>通常代理服务器都设置一个较大的硬盘缓冲区，会将部分请求的响应保存到缓冲区中，当其他用户再访问相同的信息时， 则直接由缓冲区中取出信息，传给用户，以提高访问速度。</p></li><li><p>隐藏客户端真实 IP</p><p>上网者也可以通过这种方法隐藏自己的 IP，免受攻击。</p></li></ol><h3 id="反向代理" tabindex="-1">反向代理 <a class="header-anchor" href="#反向代理" aria-label="Permalink to &quot;反向代理&quot;">​</a></h3><p>反向代理，其实是&quot;<strong>代理服务器</strong>&quot;代理了&quot;<strong>目标服务器</strong>&quot;，去和&quot;<strong>客户端</strong>&quot;进行交互。</p><p>通过反向代理服务器访问目标服务器时，客户端是不知道真正的目标服务器是谁的，甚至不知道自己访问的是一个代理。</p><p>反向代理的使用场景，就是我们在 Web 开发中用到的负载均衡服务器，客户端发送请求到负载均衡服务器上，负载均衡服务器再把请求转发给一台真正的服务器来执行，再把执行结果返回给客户端。</p><p><img src="'+d+'" alt="reverse-proxy"></p><p><strong>反向代理的作用：</strong></p><ol><li><p>隐藏服务器真实 IP</p><p>使用反向代理，可以对客户端隐藏服务器的 IP 地址。</p></li><li><p>负载均衡</p><p>反向代理服务器可以做负载均衡，根据所有真实服务器的负载情况，将客户端请求分发到不同的真实服务器上。</p></li><li><p>提高访问速度</p><p>反向代理服务器可以对于静态内容及短时间内有大量访问请求的动态内容提供缓存服务，提高访问速度。</p></li><li><p>提供安全保障</p><p>反向代理服务器可以作为应用层防火墙，为网站提供对基于 Web 的攻击行为（例如 DoS/DDoS）的防护，更容易排查恶意软件等。还可以为后端服务器统一提供加密和 SSL 加速（如 SSL 终端代理），提供 HTTP 访问认证等。</p></li></ol><h3 id="对比" tabindex="-1">对比 <a class="header-anchor" href="#对比" aria-label="Permalink to &quot;对比&quot;">​</a></h3><ol><li><p><strong>正向代理其实是客户端的代理</strong>，帮助客户端访问其无法访问的服务器资源。<strong>反向代理则是服务器的代理</strong>，帮助服务器做负载均衡，安全防护等。</p></li><li><p><strong>正向代理一般是客户端架设的</strong>，比如在自己的机器上安装一个代理软件。<strong>而反向代理一般是服务器架设的</strong>，比如在自己的机器集群中部署一个反向代理服务器。</p></li><li><p>正向代理中，<strong>服务器不知道真正的客户端到底是谁</strong>，以为访问自己的就是真实的客户端。而在反向代理中，<strong>客户端不知道真正的服务器是谁</strong>，以为自己访问的就是真实的服务器。</p></li><li><p>正向代理和反向代理的作用和目的不同。<strong>正向代理主要是用来解决访问限制问题。而反向代理则是提供负载均衡、安全防护等作用</strong>。二者均能提高访问速度。</p></li></ol><blockquote><p>引用地址（带漫画）： <a href="https://cloud.tencent.com/developer/article/1418457" target="_blank" rel="noreferrer">终于有人把正向代理和反向代理解释的明明白白了！</a></p></blockquote>',92),p=[c];function h(g,T,x,f,P,y){return e(),l("div",null,p)}const k=t(n,[["render",h]]);export{m as __pageData,k as default};
