import{_ as s,o as i,c as a,R as e}from"./chunks/framework.QnHPwK53.js";const m=JSON.parse('{"title":"git的使用","description":"","frontmatter":{},"headers":[],"relativePath":"necessary/git.md","filePath":"necessary/git.md","lastUpdated":1712717073000}'),n={name:"necessary/git.md"},t=e(`<h1 id="git的使用" tabindex="-1">git的使用 <a class="header-anchor" href="#git的使用" aria-label="Permalink to &quot;git的使用&quot;">​</a></h1><h2 id="modify-commit-message" tabindex="-1">修改commit信息 <a class="header-anchor" href="#modify-commit-message" aria-label="Permalink to &quot;修改commit信息{#modify-commit-message}&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --amend</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;new commit message&quot;</span></span></code></pre></div><h2 id="git-push-force" tabindex="-1"><code>git push --force</code> 和 <code>git push --force-with-lease</code> 的区别 <a class="header-anchor" href="#git-push-force" aria-label="Permalink to &quot;\`git push --force\` 和 \`git push --force-with-lease\` 的区别{#git-push-force}&quot;">​</a></h2><p><code>git push --force-with-lease</code> 是 <code>git push -f</code>（或 <code>git push --force</code>）的一种更安全的替代品。虽然两者都用于强制推送本地分支到远程仓库，但它们在处理潜在的提交覆盖上有所不同。</p><p><strong><code>git push --force</code> 或 <code>-f</code>:</strong></p><p>当你使用强制推送 (<code>-f</code> 或 <code>--force</code>) 时，你告诉 Git 忽略任何冲突并强制覆盖远程分支上的提交。这意味着如果远程分支自从你上次拉取（或推送）以来有了更新，这些更新将被你的本地提交所覆盖，无论这些更新是什么。这可能会导致你的同事的工作丢失，因为他们的提交会被你的提交替换。</p><p><strong><code>git push --force-with-lease</code>:</strong></p><p>另一方面，<code>--force-with-lease</code> 命令提供了一种安全检查机制。它确保你的强制推送仅在你本地版本的远程分支与实际远程分支相同的情况下发生。如果远程分支有任何你本地不知道的新提交，推送会被拒绝。这基本上是 Git 确认在你尝试覆盖远程分支时没有其他人推送了新的更改。</p><p><strong>总结一下:</strong></p><p><code>--force-with-lease</code> 比 <code>--force</code> 更安全，因为它可以防止不小心覆盖其他人的更改。它为强制推送操作加入了额外的保护，让你在确信没有其他人的工作会因你的操作而丢失时，才能推送你的更改。当处理可能涉及其他人更改的共享分支时，建议使用 <code>--force-with-lease</code> 而不是 <code>--force</code>。</p><h2 id="merge-messy-commit-messages" tabindex="-1">如何合并杂乱的commit messages <a class="header-anchor" href="#merge-messy-commit-messages" aria-label="Permalink to &quot;如何合并杂乱的commit messages{#merge-messy-commit-messages}&quot;">​</a></h2><blockquote><p>feat: commit 3 (7a4f3b0324a31fc0b449ec21fc924212569b61dc) feat: commit 2 (8b2adef5948e57271f02987afbcbfa4606bd6503) feat: commit 1 (2676c9f0f40f1a2b793175acf1b88093a700072a)</p></blockquote><p>如上所示，有三条commit messages，它们实现的功能是相同的，后两条可能仅仅是修改了一行的样式，或一点点逻辑上的修改，但却被分成了三条commit messages。</p><h3 id="使用git-rebase-interactive-git-rebase-i" tabindex="-1">使用<code>git rebase --interactive</code> / <code>git rebase -i</code> <a class="header-anchor" href="#使用git-rebase-interactive-git-rebase-i" aria-label="Permalink to &quot;使用\`git rebase --interactive\` / \`git rebase -i\`&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD~3</span></span></code></pre></div><p>这里 <code>HEAD~N</code> 是一个引用点，它告诉 Git 从当前分支的 HEAD 回溯 N 个提交。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">SH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>这里 <code>&lt;SHA&gt;</code> 是一个<strong>基础坐标</strong>，这个坐标通常是要合并的所有commits更前一次commit，其代表的意思是：我要以此commit为起点，修改后面提交的commit。</p><p>执行上述命令后，终端会打开一个文本编辑器，如下所示：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pick</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2676</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">c9f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feat:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pick</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">b2adef</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feat:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pick</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">a4f3b0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feat:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Rebase 73d4730..7a4f3b0 onto 73d4730 (3 commands)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Commands:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># p, pick &lt;commit&gt; = use commit</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># e, edit &lt;commit&gt; = use commit, but stop for amending</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># f, fixup [-C | -c] &lt;commit&gt; = like &quot;squash&quot; but keep only the previous</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#                    commit&#39;s log message, unless -C is used, in which case</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#                    keep only this commit&#39;s message; -c is same as -C but</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#                    opens the editor</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># b, break = stop here (continue rebase later with &#39;git rebase --continue&#39;)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># d, drop &lt;commit&gt; = remove commit</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># l, label &lt;label&gt; = label current HEAD with a name</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># t, reset &lt;label&gt; = reset HEAD to a label</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#         create a merge commit using the original merge commit&#39;s</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#         message (or the oneline, if no original merge commit was</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#         specified); use -c &lt;commit&gt; to reword the commit message</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># u, update-ref &lt;ref&gt; = track a placeholder for the &lt;ref&gt; to be updated</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#                       to this position in the new commits. The &lt;ref&gt; is</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.git/rebase-merge/git-rebase-todo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [unix]</span></span></code></pre></div><p>可以看到三次commit及其对应的SHA，<code>pick</code>命令是默认值。</p><ul><li><code>pick</code>/<code>p</code>：表示保留这次commit</li><li><code>reword</code>/<code>r</code>：使用该commit，但会停下来以便你编辑提交信息</li><li><code>edit</code>/<code>e</code>：使用该commit，但会停下来以便你修改提交内容（通过 git commit --amend），或者添加或删除更改。</li><li><code>squash</code>/<code>s</code>：将该commit，与前一个提交合并，并提供一个机会来合并提交信息。</li><li><code>fixup</code>/<code>f</code>：类似于 squash，但会舍弃此提交的日志信息，并保留前一个提交的日志信息。</li><li><code>exec</code>/<code>x</code>：在当前提交上运行 shell 命令（命令写在该行的剩余部分）。</li><li><code>break</code>/<code>b</code>：在此处停止，你可以稍后通过 git rebase --continue 继续 rebase。</li><li><code>drop</code>/<code>d</code>：完全删除该commit。</li><li><code>label</code>/<code>l</code>：为当前 HEAD 打上标签，以便后面引用。</li><li><code>reset</code>/<code>t</code>：将 HEAD 重置到标签label 所在的位置。</li><li><code>merge</code>/<code>m</code>：使用原始合并提交的信息（或者如果没有原始合并提交的话，使用 <code>&lt;oneline&gt;</code> 提供的信息）来创建一个合并提交。使用<code>-c &lt;commit&gt;</code>来重写提交信息。</li><li><code>update-ref</code>/<code>u</code>：跟踪一个占位符，表明 <code>&lt;ref&gt;</code> 将在新提交中的这个位置被更新。</li></ul><p>要达到合并的目的，我们可以使用<code>squash</code>操作，...其他操作也可以实现。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pick</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2676</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">c9f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feat:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">b2adef</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feat:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">a4f3b0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feat:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span></code></pre></div><p>然后保存退出。此时终端会自动打开第二个文本编辑器，让你编辑提交信息。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pick</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2676</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">c9f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feat:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This is a combination of 3 commits.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This is the 1st commit message:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">feat:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This is the commit message #2:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">feat:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This is the commit message #3:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">feat:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Please enter the commit message for your changes. Lines starting</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># with &#39;#&#39; will be ignored, and an empty message aborts the commit.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Date:      Wed Apr 10 09:53:10 2024 +0800</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># interactive rebase in progress; onto 73d4730</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Last commands done (3 commands done):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#    squash 8b2adef feat: commit 2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#    squash 7a4f3b0 feat: commit 3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># No commands remaining.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># You are currently rebasing branch &#39;test/commit-message&#39; on &#39;73d4730&#39;.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Changes to be committed:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.git/COMMIT_EDITMSG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [unix]</span></span></code></pre></div><p>带有&#39;#&#39;的将被忽略，空消息将终止提交。 此时我们只需要保留一条commit message即可，注释无用的commit message。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pick</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2676</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">c9f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feat:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This is a combination of 3 commits.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This is the 1st commit message:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">feat:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> message</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This is the commit message #2:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># feat: commit 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This is the commit message #3:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># feat: commit 3</span></span></code></pre></div><p>修改完成后保存并退出。至此，我们就完成了合并commit messages的操作。 <a href="#git-push-force">强制提交代码</a>就完成了。</p>`,30),l=[t];function p(h,k,c,o,d,r){return i(),a("div",null,l)}const F=s(n,[["render",p]]);export{m as __pageData,F as default};
